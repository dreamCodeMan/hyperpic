// Code generated by go-bindata.
// sources:
// doc/index.html
// swagger.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6f\xdb\x3c\x0c\xbe\xbf\xbf\x82\xf5\x8b\x62\x1b\x50\x59\x4e\xbf\x16\x64\x76\x80\xa2\xe9\xa1\xa7\x15\xdd\x2e\x3b\x2a\x16\x23\x73\x95\x25\x43\xa2\xf3\xb1\x61\xff\x7d\xb0\x8d\x26\x76\x51\xcc\x17\x93\x22\xf5\xf0\x21\xf5\x30\x3f\x5b\x7d\xbd\xff\xfe\xe3\xe9\x01\x2a\xae\xed\xf2\xbf\x7c\xf8\x01\x00\xe4\x15\x2a\x3d\x98\xbd\xcb\xc4\x16\x97\x2b\x5f\xbe\x60\x80\x07\x67\xc8\x21\xdc\x3d\x3d\xc2\x76\x96\x5e\xce\xe1\x19\x37\x18\xd0\x95\x98\xcb\x21\xf1\x74\xf1\x4c\x08\x70\x88\x1a\x35\x6c\x7c\x00\xa5\x55\xc3\xb4\x45\xd0\x18\xc9\x38\x10\x62\x94\x5b\x23\x2b\x70\xaa\xc6\x22\xd9\x12\xee\x1a\x1f\x38\x81\xd2\x3b\x46\xc7\x45\xb2\x23\xcd\x55\xa1\x71\x4b\x25\x8a\xde\xb9\x00\x72\xc4\xa4\xac\x88\xa5\xb2\x58\xcc\x12\x90\xef\xc3\x69\x8c\x65\xa0\x86\xc9\xbb\x11\xe2\x91\x76\x4f\x8d\xab\xa1\xa5\x88\x61\x8b\x1a\xd6\x07\x78\xac\x95\x41\xf8\x86\xa1\x2b\x99\xbe\x03\x5e\x56\x2a\x44\xe4\x22\x69\x79\x23\xe6\x89\x9c\xf6\x7d\x74\x9e\x71\xe5\x4b\xd0\x1e\xa3\xfb\xc0\xdd\x25\x67\x10\x7c\xcb\x18\xa0\xe9\x2a\x44\x3e\x58\x8c\xc7\xf4\xc9\x4c\xfa\xd8\xc9\x5f\x7b\x7d\x80\xdf\x47\xb7\xfb\x6a\x15\x0c\xb9\x05\x64\x5f\x26\xc7\x8d\xd2\x9a\x9c\x99\x9c\xff\x39\x5a\xaa\x21\x61\xbd\xf1\x6f\xb0\xd6\xaa\x7c\x31\xc1\xb7\x4e\x0b\xea\x9a\x5f\x80\x25\x87\x2a\x08\x13\x94\x26\x74\xfc\x31\xd3\x68\x2e\xe0\xff\xd9\xcd\xdd\xf5\xea\x33\x64\xe7\x9d\x7d\x3d\x9f\xdf\xdf\xc2\x2c\xcb\xce\x3f\x4d\x39\x54\x48\xa6\xe2\x45\x17\x6a\xf6\xd3\x10\xe3\x9e\x85\xb2\x64\xdc\x02\x2c\x6e\x18\xce\xa8\xee\x1e\x5c\x39\xfe\x27\x5f\xaa\xcd\x1b\xce\xbd\x14\x16\x30\xbb\xba\x6d\xf6\xef\xa2\x8c\x87\x74\x75\xd9\xec\x21\x83\x0c\x6e\x26\x8c\x4e\x85\x72\x39\x9a\x78\x2e\x4f\x6b\x90\x77\xa3\x1f\x3d\x4c\x40\xed\x4b\x88\x0d\x96\xa2\x0d\xb6\x48\x64\xdc\x29\x63\x30\xa4\x07\x55\xdb\x04\x2a\xd2\x28\x2a\x1f\x79\x10\x20\x87\x16\x13\x88\x6d\xd3\x04\x8c\x51\xec\x54\x70\xe4\x4c\x7c\x0d\x58\xf5\xeb\x20\x02\x3a\x8d\x81\x9c\x59\xe6\xb2\x47\x1f\xcb\xa0\x97\x2f\xc4\x50\x16\x89\x94\x01\xd7\x64\xed\x21\x35\xc4\x55\xbb\x4e\xc9\xcb\x5e\x62\x32\xa0\x45\x15\x31\xca\x6e\x2d\xd3\x6c\x40\x49\x6b\x72\xe9\xcf\x98\x2c\x73\x39\xa0\xbc\xf6\x36\x34\x94\xcb\x61\xeb\xff\x06\x00\x00\xff\xff\x80\x30\x79\x35\x0d\x04\x00\x00")

func docIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_docIndexHtml,
		"doc/index.html",
	)
}

func docIndexHtml() (*asset, error) {
	bytes, err := docIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/index.html", size: 1037, mode: os.FileMode(420), modTime: time.Unix(1492624283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xc1\x72\xdb\x36\x10\xbd\xf3\x2b\x76\xd0\x1e\x23\xd1\x76\x22\x27\xd5\xad\x93\xb8\x13\xcf\x34\x99\x4c\xec\x9e\x32\x3d\x40\xe4\x92\x84\x43\x02\x30\xb0\xb4\xe2\x74\xfa\xef\x9d\x05\x24\x8a\x94\x28\xc5\xae\xd5\x49\x0f\xd1\xc5\x21\xb0\x78\xfb\xf6\x71\x17\xbb\x8c\x5f\xca\xb2\x44\x37\x07\x71\x36\x3d\x11\x89\xcf\x2a\x6c\xd0\xcf\x13\x80\x09\x88\x8a\xc8\x8a\xcd\x3f\xbd\x48\x2a\xe3\x69\x0e\x42\x35\xb2\xc4\xe9\xbd\x69\xdd\x24\x37\x8d\x54\x7a\x4a\x75\x2e\x92\x85\xf4\xf8\x41\x52\x35\x07\x91\x8a\xc4\x3a\x93\xb7\x59\x07\x26\xad\xad\x55\x26\x49\x19\x9d\xde\x78\xa3\x45\x92\x19\xed\xdb\xe6\x80\x81\xd2\x85\xe1\x4d\x52\x54\xe3\x1c\xc4\x25\xbb\x85\x2b\x74\x77\x2a\x43\xf8\xf5\xc3\x25\x93\xbb\x43\xe7\x95\xd1\x73\x10\x77\x27\xd3\x93\xe9\x29\xaf\xe5\xe8\x33\xa7\x2c\x85\xf5\xdf\xa4\x27\x78\x7b\x7d\xfd\x01\x1a\x95\x39\xe3\x57\xc7\x0b\xe3\xa0\x52\x65\x35\xa9\xf1\x0e\x6b\x08\x21\x81\x75\x26\x43\xef\x95\x2e\xa7\x09\x40\xad\x32\xd4\x1e\x99\x02\x80\x96\x0d\x73\x78\x77\x79\x2d\xc2\x73\xeb\xea\xf9\x4a\x97\x79\x9a\x96\x8a\xaa\x76\x31\xcd\x4c\x93\x62\xeb\x3f\xcb\x5c\x3d\x3f\x4d\x03\xe6\x64\xe5\x30\x5d\xd4\x66\x91\x36\xd2\x13\xba\xf4\xf7\xcb\xd7\x17\xef\xaf\x2e\xa6\x4d\x2e\x92\x84\x64\xb9\xd2\x60\xe5\x23\xc4\x19\xbd\x7c\x99\xe4\xca\xdb\x5a\xde\xbf\xdf\xd9\x1a\x04\x29\x5e\x3b\x94\x84\x20\x75\x0e\x8d\xd4\x1c\x8b\x5a\x9b\x76\xb8\x6f\x51\xd6\x54\x8d\x03\xf7\xf7\x86\xc8\x71\x07\xb2\x0a\xb3\xcf\xc0\xc1\xa0\x13\x49\x92\x63\xa1\xb4\x62\x93\xc0\x3d\x1a\x7d\x44\x6f\x4d\xa7\x18\xdd\x5b\x46\x36\x8b\x1b\xcc\x28\x22\x3b\xbc\x6d\x95\xc3\x7c\x0e\x9f\x84\x27\x49\xad\x17\x7f\x86\x0d\xeb\x8c\x45\x47\x2a\x66\x03\xff\xe2\xf6\xfa\xa9\x43\x5b\x18\x53\x8b\x6e\x71\xc8\xf4\xba\xc2\xd5\x31\x30\x45\x47\x95\xed\xf0\x8b\x6c\x6c\x8d\x5b\xd8\x40\xae\xc5\x04\x20\x88\xfa\x06\x6b\x24\x7c\x54\x04\x99\xcc\x2a\x14\xcf\x40\x78\xd3\xba\x0c\xf7\x86\x12\xec\x9e\x10\x49\x38\x0f\x85\xaa\x71\x6d\x1f\x1d\x3e\x45\x9c\x00\xd0\xc3\xdc\x52\x28\x52\x5e\x0b\xd4\x73\x09\x85\xac\x7d\x27\xda\x1f\xb6\x36\x32\x7f\x94\x68\xc1\x25\x6b\xa6\xbe\x86\xbf\x6c\xce\x7f\x2b\xe9\xab\xbd\x0a\xf2\xa1\x9d\x68\x3d\x39\xa5\xcb\x43\xf1\x5a\x49\x15\x47\xdb\x06\x9a\x98\xc7\x9a\x98\x76\x2a\xaa\xaf\xbb\xa8\x4a\x13\x96\xeb\xbc\xd9\x23\xa3\xfa\x8a\x07\x60\x03\xd0\xe3\xc9\x36\xaa\xc1\x60\x7d\x00\x9a\x45\xfa\x37\xd0\xf9\x2c\x1c\xdd\x8b\xbc\xf5\xf6\x83\xdc\x20\x52\x42\x4f\xd3\x1b\x5b\x0e\x04\x83\xd3\xb3\xd9\xec\xc5\x2c\x19\xaa\xc6\x60\xe9\x8d\xc5\x72\x40\x15\xc4\xcb\xe2\xe5\x79\x51\xbc\x3a\x3f\x9d\xe5\xe7\x2f\xf0\xe5\xab\x57\x28\x67\xf8\xcb\xf9\xf3\xe7\x39\x16\xa7\xe7\x67\x33\x36\xbf\x70\xce\xb8\x61\x12\x0d\x63\xf8\x88\xd6\xa1\x47\x4d\x1e\xa4\x06\x64\xf3\x15\xf1\x6f\x24\x5b\x30\xdd\x9b\x55\x61\x77\x7e\x40\xb7\xbe\xa7\x3d\xde\xc6\x91\x43\x09\x99\x1c\xfb\xcf\xfb\x33\x6c\xdc\x39\x9f\xe7\x17\xb6\x4d\x02\xa0\x41\xef\x65\x39\x0e\xbe\x9d\x0c\x7b\x12\x22\x22\xf4\xe1\xc7\xf2\x60\x4b\xa0\x10\x11\x9c\x9e\x9c\x25\xdb\x4c\x40\x5c\x99\x06\xa9\x52\xba\x84\x25\x6a\x82\xa5\x33\xba\x64\x54\x2e\xc1\x20\x4b\x5a\x85\x16\x11\xd1\x4a\xa4\xee\x2e\x6e\x9b\x46\xba\x7b\xee\xa5\xc1\x20\xf6\x19\xd4\xb9\x35\x4a\x77\x22\xf7\x87\x89\xf8\x1b\x9d\x18\xe2\x96\x5b\xa5\x52\xcf\xfa\xec\xe4\xa4\x2f\xd7\x50\x11\x6d\x62\xa4\x7d\xd5\xc2\x24\x24\x87\x12\xff\xec\xb0\x98\x83\xf8\x29\xed\x35\xbf\x74\xd8\xf9\x36\x10\xb3\x43\x1e\x63\x6f\x7a\x82\xd7\x41\xc9\x74\x17\x0f\x0f\x12\xf0\x69\xdd\xcb\x39\xed\xd3\xbf\xb8\x96\xff\x5e\x17\x15\xb7\xb8\x5d\xe1\x63\xeb\xdb\x0c\x0c\xff\x6f\xc1\x47\xba\xf5\x77\x55\xdd\x4a\x27\x1b\x24\x74\x03\xad\x56\x23\x57\xbf\x69\xf3\x4f\x31\x0f\xae\x89\xfe\xe2\xe6\xc6\xea\xf5\xdb\x5d\xfa\x5d\x47\xe3\x21\x8f\xf1\xb9\x7c\xd9\xc1\xe0\x72\xd8\x73\x0f\x6c\x18\x39\xd3\xec\x30\xba\x6d\xd1\xdd\x3f\x00\x65\xf7\x62\x6e\xcc\x1d\xf6\x06\x14\x30\x6e\x3d\x5b\x2c\x15\x4f\x8d\x3b\xa3\x4b\x04\x29\x64\x5b\xd3\x3c\x6e\xf7\x36\x50\xb7\xcd\xf0\x3d\x4c\x76\x6c\x78\x2d\xba\xd8\x4a\xfb\x38\x1b\xaf\x2e\x7b\xfe\x50\xd9\x49\xf4\x38\xae\xec\x24\xfa\x83\xf3\xbc\xff\xc5\xb2\x36\x6e\xda\x9a\x94\x95\x8e\xd2\xc2\xb8\x66\x92\x4b\x92\xdf\xad\x2a\x86\xe3\xd8\x8f\xaa\xd8\x9c\xf9\x56\x55\x0c\x52\xa2\xa3\xc4\xb5\xf2\x46\x12\x8e\x20\x6d\x87\xf0\x08\xb6\xc3\x09\x0c\x38\x63\xa6\xdb\x57\x78\x3f\x97\x47\x9b\xe5\xea\xeb\xed\x01\x97\xf6\xee\x68\xd6\x5b\x5e\xe2\xc2\x8e\x2c\x5b\x3d\x66\x5c\xaa\x62\x64\x95\x54\x51\x1c\xaf\x11\xbc\x38\x64\xbe\x90\x79\x10\x1a\x3d\x1d\x2f\x53\x7f\x94\xc7\xb7\xcb\x63\xf9\xe0\x8e\x31\x32\xdc\x0e\x09\x5d\x21\x79\xa0\x8a\xfb\x43\x1e\xbf\xce\xf8\x21\xa4\xd2\x33\x50\x1a\xac\xfa\x82\xb5\x9f\x8e\x90\xa8\xfe\x03\x12\x15\xaa\xb2\xa2\xc7\xb0\x28\x14\x1d\xad\x7d\x06\x1a\x95\x59\x6e\x9c\x83\xf2\x50\x28\x22\xcc\x81\x0c\x28\x66\x29\x5d\x89\x04\xb9\x6a\x50\x7b\x4e\xa8\x31\x52\xb9\x75\xc7\x13\xe7\x5d\xe8\x68\x35\x46\x85\xcc\x1d\x3a\x59\xaf\xff\x83\x8c\xbf\x00\xc7\x08\xdc\x1e\xcf\xfd\x1b\xae\x9d\x95\xf3\xdb\x56\xd6\x8a\xee\x07\xef\x67\xf4\xa5\x1c\x6f\xa4\xb9\xd0\xfc\x99\xe3\x7b\xaf\x84\x0c\x48\xf0\x16\x33\x55\xa8\x0c\xb8\xcb\x4b\xda\x7b\x61\xff\x13\x00\x00\xff\xff\x7e\x08\x76\x4e\x51\x15\x00\x00")

func swaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerYaml,
		"swagger.yaml",
	)
}

func swaggerYaml() (*asset, error) {
	bytes, err := swaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.yaml", size: 5457, mode: os.FileMode(420), modTime: time.Unix(1492624283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/index.html": docIndexHtml,
	"swagger.yaml": swaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{docIndexHtml, map[string]*bintree{}},
	}},
	"swagger.yaml": &bintree{swaggerYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

