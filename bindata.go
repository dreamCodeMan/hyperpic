// Code generated by go-bindata.
// sources:
// doc/index.html
// swagger.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x8f\xd3\x30\x10\xbd\xf3\x2b\xa6\x41\x2b\x40\x5a\xc7\xe9\x7e\xb1\x2a\x49\xa5\xd5\x2e\x12\x9c\x58\xad\xb8\x70\x74\xe3\xa9\x33\xe0\xd8\x96\x3d\x69\x1b\x10\xff\x1d\x35\xd1\xb6\xcd\x6a\x45\x2f\x9d\xe7\x37\x79\x79\x33\x7e\x29\x67\x0f\xdf\xee\xbf\xff\x78\xfc\x0c\x0d\xb7\x76\xf9\xa6\x1c\xff\x00\x00\xca\x06\x95\x1e\xcb\x01\x32\xb1\xc5\xe5\x97\x3e\x60\x0c\x54\xc3\xdd\xe3\x57\x78\xc2\x35\x46\x74\x35\x96\x72\x64\x8f\xdd\x33\x21\xc0\x21\x6a\xd4\xb0\xf6\x11\x94\x56\x81\x69\x83\xa0\x31\x91\x71\x20\xc4\x49\x6f\x8b\xac\xc0\xa9\x16\xab\x6c\x43\xb8\x0d\x3e\x72\x06\xb5\x77\x8c\x8e\xab\x6c\x4b\x9a\x9b\x4a\xe3\x86\x6a\x14\x03\x38\x07\x72\xc4\xa4\xac\x48\xb5\xb2\x58\xcd\x33\x90\xaf\xcb\x69\x4c\x75\xa4\xc0\xe4\xdd\x89\xe2\xc1\xf6\x60\x8d\x1b\x1c\x86\x49\x18\x37\xa8\x61\xd5\xc3\xf3\x8c\xf9\x2b\xba\x75\xa3\x62\x42\xae\xb2\x8e\xd7\xe2\x76\xda\x30\x13\xe2\x00\x9e\xf0\xc1\xd7\xa0\x3d\x26\xf7\x8e\xf7\x4f\x39\x83\xe0\x3b\xc6\x08\x41\x19\x84\xc4\xbd\xc5\x74\x68\x9f\xec\x63\xe0\x8e\x78\xe5\x75\x0f\x7f\x0e\x70\xff\x6b\x55\x34\xe4\x16\x50\x7c\x9a\x1c\x07\xa5\x35\x39\x33\x39\xff\x7b\xa8\x54\x20\x61\xbd\xf1\x2f\xb4\x56\xaa\xfe\x65\xa2\xef\x9c\x16\xd4\x2a\x83\x0b\xb0\xe4\x50\x45\x61\xa2\xd2\x84\x8e\xdf\x17\x1a\xcd\x39\xbc\x9d\x5f\xdf\x5d\x3d\x7c\x84\xe2\x6c\x5f\x5f\xdd\xde\xde\xdf\xc0\xbc\x28\xce\x3e\x4c\x3d\x34\x48\xa6\xe1\xc5\x9e\x0a\xbb\x29\xc5\xb8\x63\xa1\x2c\x19\xb7\x00\x8b\x6b\x86\x19\xb5\xfb\xcb\x56\x8e\xff\xeb\x97\x5a\xf3\xc2\xf3\x10\x83\x05\xcc\x2f\x6f\xc2\xee\x55\x95\xd3\x25\x5d\x5e\x84\x1d\x14\x50\xc0\xf5\xc4\xd1\xf1\x45\xa5\x3c\xd9\x78\x29\x8f\xb9\x2f\xf7\xab\x3f\xb9\x98\x88\xda\xd7\x90\x02\xd6\xa2\x8b\xb6\xca\x64\xda\x2a\x63\x30\xe6\xbd\x6a\x6d\x06\x0d\x69\x14\x8d\x4f\x3c\x86\x8f\x63\x87\x19\xa4\x2e\x84\x88\x29\x89\xad\x8a\x8e\x9c\x49\xcf\x84\x55\xbf\x7b\x11\xd1\x69\x8c\xe4\xcc\xb2\x94\x83\xfa\x69\x0c\x86\xe8\x42\x8a\x75\x95\x49\x19\x71\x45\xd6\xf6\xb9\x21\x6e\xba\x55\x4e\x5e\x0e\x11\x93\x11\x2d\xaa\x84\x49\x6e\xe6\xf9\x45\x5e\x8c\x2a\x79\x4b\x2e\xff\x99\xb2\x65\x29\x47\x95\xe7\xd9\xc6\x81\x4a\x39\x7e\xe6\xff\x02\x00\x00\xff\xff\x63\xbc\x77\x8c\xfe\x03\x00\x00")

func docIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_docIndexHtml,
		"doc/index.html",
	)
}

func docIndexHtml() (*asset, error) {
	bytes, err := docIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/index.html", size: 1022, mode: os.FileMode(420), modTime: time.Unix(1492687210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x73\xdb\x36\x13\xbd\xf3\x57\xec\xe0\xfb\x8e\xb1\x68\x3b\x91\x93\xea\xd6\x49\xdc\x89\x67\x9a\x4c\x26\x71\x4f\x99\x1e\x20\x72\x49\xc2\x25\x01\x18\x58\x5a\x51\x3a\xfd\xef\x9d\x05\x24\x8a\x14\x29\xc5\xae\xdd\x49\x0f\xe1\xc5\x22\xb0\x7c\xfb\xf6\x71\x17\xbb\xb4\x5f\xc9\xb2\x44\xb7\x00\x71\x3e\x3b\x15\x89\xcf\x2a\x6c\xd0\x2f\x12\x80\x13\x10\x15\x91\x15\xbb\x9f\x5e\x24\x95\xf1\xb4\x00\xa1\x1a\x59\xe2\x6c\x6d\x5a\x77\x92\x9b\x46\x2a\x3d\xa3\x3a\x17\xc9\x52\x7a\xfc\x20\xa9\x5a\x80\x48\x45\x62\x9d\xc9\xdb\xac\x03\x93\xd6\xd6\x2a\x93\xa4\x8c\x4e\x6f\xbc\xd1\x22\xc9\x8c\xf6\x6d\x73\xc4\x40\xe9\xc2\xf0\x26\x29\xaa\x71\x01\xe2\xed\xda\xa2\xb3\x2a\x83\x9f\x3f\x5c\x31\xaf\x3b\x74\x5e\x19\xbd\x00\x71\x77\x3a\x3b\x9d\x9d\xf1\x5a\x8e\x3e\x73\xca\x52\x58\xff\x45\x7a\x82\xb7\xd7\xd7\x1f\xa0\x51\x99\x33\x1e\xdd\x9d\xca\x10\x0a\xe3\xa0\x52\x65\x75\x52\xe3\x1d\xd6\x10\xa2\x01\xeb\x4c\x86\xde\x2b\x5d\xce\x12\x80\x5a\x65\xa8\x3d\xb2\x77\x00\x2d\x1b\x76\xff\xee\xea\x5a\x84\xfb\xd6\xd5\x8b\x8d\x24\x8b\x34\x2d\x15\x55\xed\x72\x96\x99\x26\xad\x98\xa0\xcf\x64\x8d\xf1\xa7\x55\x59\xba\xac\xcd\x32\x6d\xa4\x27\x74\xe9\xaf\x57\xaf\x2f\xdf\x7f\xba\x9c\x35\xb9\x48\x12\x92\xe5\x26\xf4\x0d\xfe\x15\xf3\x88\x1e\xbe\x9c\xe4\xca\xdb\x5a\xae\xdf\x8f\xb6\x06\x01\x8a\xd7\x0e\x25\x21\x48\x9d\x43\x23\x35\xc7\xa1\xb6\xa6\x1d\xee\x5b\x94\x35\x55\xd3\xc0\xfd\xbd\x21\x72\xdc\x81\xac\xc2\xec\x0f\x60\xe5\xd0\x89\x24\xc9\xb1\x50\x5a\xb1\x49\xe0\x1e\x8d\x3e\xa2\xb7\xa6\x53\x8b\xd6\x96\x91\xcd\xf2\x06\x33\x8a\xc8\x0e\x6f\x5b\xe5\x30\x5f\xc0\x67\xe1\x49\x52\xeb\xc5\xef\x61\xc3\x3a\x63\xd1\x91\x8a\x49\xc0\x57\xdc\xde\xde\x75\x68\x4b\x63\x6a\xd1\x2d\x0e\x99\x5e\x57\xb8\x79\x0c\x4c\xd1\x51\x65\x3b\xfc\x22\x1b\x5b\xe3\x1e\x36\x90\x6b\x31\x01\x08\xa2\xbe\xc1\x1a\x09\x1f\x14\x41\x26\xb3\x0a\xc5\x33\x10\xde\xb4\x2e\xc3\x83\xa1\x04\xbb\x47\x44\x12\x9e\x87\x42\xd5\xb8\xb5\x8f\x0e\x1f\x23\x4e\x00\xe8\x61\xee\x29\x14\x29\x6f\x05\xea\xb9\x84\x42\xd6\xbe\x13\xed\x37\x5b\x1b\x99\x3f\x48\xb4\xe0\x92\x35\x53\x5f\xc3\x5f\x36\xe7\xbf\x95\xf4\xd5\x41\x05\xf9\xa1\x51\xb4\x9e\x9c\xd2\xe5\xb1\x78\xad\xa4\x8a\xa3\x6d\x03\x4d\xcc\x63\x4d\xcc\x3a\x15\xd5\xd7\x31\xaa\xd2\x84\xe5\x36\x6f\x0e\xc8\xa8\xbe\xe2\x11\xd8\x00\xf4\x70\xb2\x8d\x6a\x30\x58\x1f\x81\x66\x91\xfe\x09\x74\x3e\x0f\x8f\x1e\x44\xde\x7b\xfb\x41\x6e\x10\x29\xa1\xa7\xd9\x8d\x2d\x07\x82\xc1\xd9\xf9\x7c\xfe\x62\x9e\x0c\x55\x63\xb0\xf4\xc6\x62\x39\xa0\x0a\xe2\x65\xf1\xf2\xa2\x28\x5e\x5d\x9c\xcd\xf3\x8b\x17\xf8\xf2\xd5\x2b\x94\x73\xfc\xe9\xe2\xf9\xf3\x1c\x8b\xb3\x8b\xf3\x39\x9b\x5f\x3a\x67\xdc\x30\x89\x86\x31\x7c\x44\xeb\xd0\xa3\x26\x0f\x52\x03\xb2\xf9\x86\xf8\x37\x92\x2d\x98\x1e\xcc\xaa\xb0\xbb\x38\xa2\x5b\xdf\xd3\x01\x6f\xd3\xc8\xa1\x84\x4c\x8e\xfd\xfb\xc3\x19\x36\xed\x9c\x9f\xe7\x17\xb6\x4f\x02\xa0\x41\xef\x65\x39\x0d\xbe\x9f\x0c\x07\x12\x22\x22\xf4\xe1\xa7\xf2\x60\x4f\xa0\x10\x11\x9c\x9d\x9e\x27\xfb\x4c\x40\x7c\x32\x0d\x52\xa5\x74\x09\x2b\xd4\x04\x2b\x67\x74\xc9\xa8\x5c\x82\x41\x96\xb4\x0a\x2d\x22\xa2\x95\x48\xdd\x59\xdc\x36\x8d\x74\x6b\xee\xa3\xc1\x20\xf6\x19\xd4\xb9\x35\x4a\x77\x22\xf7\x67\x88\x78\x4d\x0e\x0a\x71\xcb\x6d\x52\xa9\x67\x7d\x7e\x7a\xda\x97\x6b\xa8\x88\x36\x31\xd2\xbe\x6a\x61\x00\x92\x43\x89\xff\xef\xb0\x58\x80\xf8\x5f\xda\x6b\x7e\xe9\xb0\xf3\xed\x20\xe6\xc7\x3c\xc6\xde\xf4\x08\xaf\x83\x92\xe9\x0e\x1e\x1e\x24\xe0\xf3\xb6\x97\x73\xda\xa7\x7f\x72\x2d\xff\xb5\x2d\x2a\x6e\x71\x63\xe1\x63\xeb\xdb\x0d\x0c\xff\x6d\xc1\x27\xba\xf5\x77\x55\xdd\x4a\x27\x1b\x24\x74\x03\xad\x36\x23\x57\xbf\x69\xf3\xa5\x98\x07\xd7\x44\x7f\x71\x77\x62\xf5\xfa\xed\x98\x7e\xd7\xd1\x78\xc8\x63\x7c\x2e\x5f\x76\x30\x38\x1c\x0e\x9c\x03\x3b\x46\xce\x34\x23\x46\xb7\x2d\xba\xf5\x3d\x50\xc6\x07\x73\x63\xee\xb0\x37\xa0\x80\x71\xdb\xd9\x62\xa5\x78\x6a\x1c\x8d\x2e\x11\xa4\x90\x6d\x4d\x8b\xb8\xdd\xdb\x40\xdd\x36\xc3\xf7\x70\x32\xb2\xe1\xb5\xe8\x62\x2f\xed\xe3\x6c\xbc\x39\xec\xf9\xfb\x64\x94\xe8\x71\x5c\x19\x25\xfa\xbd\xf3\xbc\xff\xa1\xb2\x35\x6e\xda\x9a\x94\x95\x8e\xd2\xc2\xb8\xe6\x24\x97\x24\xbf\x5b\x55\x0c\xc7\xb1\x1f\x55\xb1\x7b\xe6\x5b\x55\x31\x48\x89\x8e\x12\xd7\xca\x1b\x49\x38\x81\xb4\x1f\xc2\x03\xd8\x0e\x27\x30\xe0\x8c\x99\xed\x1f\xe1\xfd\x5c\x9e\x6c\x96\x9b\xaf\xb7\x7b\x1c\xda\xe3\xd1\xac\xb7\xbc\xc2\xa5\x9d\x58\xb6\x7a\xca\xb8\x54\xc5\xc4\x2a\xa9\xa2\x78\xba\x46\xf0\xe2\x98\xf9\x52\xe6\x41\x68\xf4\xf4\x74\x99\xfa\xa3\x3c\xbe\x5d\x1e\xab\x7b\x77\x8c\x89\xe1\x76\x48\xe8\x13\x92\x07\xaa\xb8\x3f\xe4\xf1\xeb\x8c\x6f\x42\x2a\x3d\x03\xa5\xc1\xaa\x2f\x58\xfb\xd9\x04\x89\xea\x5f\x20\x51\xa1\x2a\x2b\x7a\x08\x8b\x42\xd1\x93\xb5\xcf\x40\xa3\x32\xab\x9d\x73\x50\x1e\x0a\x45\x84\x39\x90\x01\xc5\x2c\xa5\x2b\x91\x20\x57\x0d\x6a\xcf\x09\x35\x45\x2a\xb7\xee\xe9\xc4\x79\x17\x3a\x5a\x8d\x51\x21\x73\x87\x4e\xd6\xdb\x7f\x8e\xf1\x17\xe0\x14\x81\xdb\xa7\x73\xff\x86\x6b\x67\xe3\xfc\xb6\x95\xb5\xa2\xf5\xe0\xfd\x4c\xbe\x94\xa7\x1b\x69\x2e\x35\x7f\xe6\xf8\xde\x2b\x21\x03\x12\xbc\xc5\x4c\x15\x2a\x03\xee\xf2\x92\x0e\x1e\xd8\x7f\x07\x00\x00\xff\xff\x73\x05\x7c\x2f\x48\x15\x00\x00")

func swaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerYaml,
		"swagger.yaml",
	)
}

func swaggerYaml() (*asset, error) {
	bytes, err := swaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.yaml", size: 5448, mode: os.FileMode(420), modTime: time.Unix(1492686809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/index.html": docIndexHtml,
	"swagger.yaml": swaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{docIndexHtml, map[string]*bintree{}},
	}},
	"swagger.yaml": &bintree{swaggerYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

