// Code generated by go-bindata.
// sources:
// docs/index.html
// docs/swagger.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x8f\xd3\x30\x10\xbd\xf3\x2b\xa6\x41\x2b\x40\x5a\x27\xe9\x7e\xb1\x2a\x49\xa5\xd5\x2e\x12\x9c\x58\xad\xb8\x70\x74\xed\xa9\x33\xe0\xd8\x96\x3d\x69\x1b\x10\xff\x1d\x35\xd1\xb6\xcd\x6a\x45\x2f\x9d\xe7\x37\x79\x79\x33\x7e\xa9\x66\x0f\xdf\xee\xbf\xff\x78\xfc\x0c\x0d\xb7\x76\xf9\xa6\x1a\xff\x00\x00\xaa\x06\xa5\x1e\xcb\x01\x32\xb1\xc5\xe5\x97\x3e\x60\x0c\xa4\xe0\xee\xf1\x2b\x3c\xe1\x1a\x23\x3a\x85\x55\x31\xb2\xc7\xee\x99\x10\xe0\x10\x35\x6a\x58\xfb\x08\x52\xcb\xc0\xb4\x41\xd0\x98\xc8\x38\x10\xe2\xa4\xb7\x45\x96\xe0\x64\x8b\x75\xb6\x21\xdc\x06\x1f\x39\x03\xe5\x1d\xa3\xe3\x3a\xdb\x92\xe6\xa6\xd6\xb8\x21\x85\x62\x00\xe7\x40\x8e\x98\xa4\x15\x49\x49\x8b\xf5\x3c\x83\xe2\x75\x39\x8d\x49\x45\x0a\x4c\xde\x9d\x28\x1e\x6c\x0f\xd6\xb8\xc1\x61\x98\x84\x71\x83\x1a\x56\x3d\x3c\xcf\x98\xbf\xa2\xab\x1a\x19\x13\x72\x9d\x75\xbc\x16\xb7\xd3\x86\x99\x10\x07\xf0\x84\x0f\x5e\x81\xf6\x98\xdc\x3b\xde\x3f\xe5\x0c\x82\xef\x18\x23\x04\x69\x10\x12\xf7\x16\xd3\xa1\x7d\xb2\x8f\x81\x3b\xe2\x95\xd7\x3d\xfc\x39\xc0\xfd\xaf\x95\xd1\x90\x5b\x40\xf9\x69\x72\x1c\xa4\xd6\xe4\xcc\xe4\xfc\xef\xa1\x92\x81\x84\xf5\xc6\xbf\xd0\x5a\x49\xf5\xcb\x44\xdf\x39\x2d\xa8\x95\x06\x17\x60\xc9\xa1\x8c\xc2\x44\xa9\x09\x1d\xbf\x2f\x35\x9a\x73\x78\x3b\xbf\xbe\xbb\x7a\xf8\x08\xe5\xd9\xbe\xbe\xba\xbd\xbd\xbf\x81\x79\x59\x9e\x7d\x98\x7a\x68\x90\x4c\xc3\x8b\x3d\x15\x76\x53\x8a\x71\xc7\x42\x5a\x32\x6e\x01\x16\xd7\x0c\x33\x6a\xf7\x97\x2d\x1d\xff\xd7\x2f\xb5\xe6\x85\xe7\x21\x06\x0b\x98\x5f\xde\x84\xdd\xab\x2a\xa7\x4b\xba\xbc\x08\x3b\x28\xa1\x84\xeb\x89\xa3\xe3\x8b\xaa\xe2\x64\xe3\x55\x71\xcc\x7d\xb5\x5f\xfd\xc9\xc5\x44\xd4\x5e\x41\x0a\xa8\x44\x17\x6d\x9d\xa5\xad\x34\x06\x63\xde\xcb\xd6\x66\xd0\x90\x46\xd1\xf8\xc4\x63\xf6\x38\x76\x98\x41\xea\x42\x88\x98\x92\xd8\xca\xe8\xc8\x99\xf4\x4c\x58\xf9\xbb\x17\x11\x9d\xc6\x48\xce\x2c\xab\x62\x10\x3f\x4d\xc1\x90\x5c\x48\x51\xd5\x59\x51\x44\x5c\x91\xb5\x7d\x6e\x88\x9b\x6e\x95\x93\x2f\x86\x84\x15\x11\x2d\xca\x84\xa9\xd8\xcc\xf3\x8b\xbc\x1c\x55\xf2\x96\x5c\xfe\x33\x65\xcb\xaa\x18\x55\x9e\x47\x1b\xe7\xa9\x8a\xf1\x2b\xff\x17\x00\x00\xff\xff\xdd\x96\xc5\x61\xfd\x03\x00\x00")

func docsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_docsIndexHtml,
		"docs/index.html",
	)
}

func docsIndexHtml() (*asset, error) {
	bytes, err := docsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/index.html", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1492689339, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x73\xdb\x36\x13\xbd\xf3\x57\xec\xe0\xfb\x8e\xb1\x68\x3b\x91\x93\xea\xd6\x49\xdc\x89\x67\x9a\x4c\x26\x71\x4f\x99\x1e\x20\x72\x49\xc2\x25\x01\x18\x58\x5a\x51\x3a\xfd\xef\x9d\x05\x24\x8a\x14\x29\xc5\xae\xdd\x49\x0f\xe1\xc5\x22\xb0\x7c\xfb\xf6\x71\x17\xbb\xb4\x5f\xc9\xb2\x44\xb7\x00\x71\x3e\x3b\x15\x89\xcf\x2a\x6c\xd0\x2f\x12\x80\x13\x10\x15\x91\x15\xbb\x9f\x5e\x24\x95\xf1\xb4\x00\xa1\x1a\x59\xe2\x6c\x6d\x5a\x77\x92\x9b\x46\x2a\x3d\xa3\x3a\x17\xc9\x52\x7a\xfc\x20\xa9\x5a\x80\x48\x45\x62\x9d\xc9\xdb\xac\x03\x93\xd6\xd6\x2a\x93\xa4\x8c\x4e\x6f\xbc\xd1\x22\xc9\x8c\xf6\x6d\x73\xc4\x40\xe9\xc2\xf0\x26\x29\xaa\x71\x01\xe2\xed\xda\xa2\xb3\x2a\x83\x9f\x3f\x5c\x31\xaf\x3b\x74\x5e\x19\xbd\x00\x71\x77\x3a\x3b\x9d\x9d\xf1\x5a\x8e\x3e\x73\xca\x52\x58\xff\x45\x7a\x82\xb7\xd7\xd7\x1f\xa0\x51\x99\x33\x1e\xdd\x9d\xca\x10\x0a\xe3\xa0\x52\x65\x75\x52\xe3\x1d\xd6\x10\xa2\x01\xeb\x4c\x86\xde\x2b\x5d\xce\x12\x80\x5a\x65\xa8\x3d\xb2\x77\x00\x2d\x1b\x76\xff\xee\xea\x5a\x84\xfb\xd6\xd5\x8b\x8d\x24\x8b\x34\x2d\x15\x55\xed\x72\x96\x99\x26\xad\x98\xa0\xcf\x64\x8d\xf1\xa7\x55\x59\xba\xac\xcd\x32\x6d\xa4\x27\x74\xe9\xaf\x57\xaf\x2f\xdf\x7f\xba\x9c\x35\xb9\x48\x12\x92\xe5\x26\xf4\x0d\xfe\x15\xf3\x88\x1e\xbe\x9c\xe4\xca\xdb\x5a\xae\xdf\x8f\xb6\x06\x01\x8a\xd7\x0e\x25\x21\x48\x9d\x43\x23\x35\xc7\xa1\xb6\xa6\x1d\xee\x5b\x94\x35\x55\xd3\xc0\xfd\xbd\x21\x72\xdc\x81\xac\xc2\xec\x0f\x60\xe5\xd0\x89\x24\xc9\xb1\x50\x5a\xb1\x49\xe0\x1e\x8d\x3e\xa2\xb7\xa6\x53\x8b\xd6\x96\x91\xcd\xf2\x06\x33\x8a\xc8\x0e\x6f\x5b\xe5\x30\x5f\xc0\x67\xe1\x49\x52\xeb\xc5\xef\x61\xc3\x3a\x63\xd1\x91\x8a\x49\xc0\x57\xdc\xde\xde\x75\x68\x4b\x63\x6a\xd1\x2d\x0e\x99\x5e\x57\xb8\x79\x0c\x4c\xd1\x51\x65\x3b\xfc\x22\x1b\x5b\xe3\x1e\x36\x90\x6b\x31\x01\x08\xa2\xbe\xc1\x1a\x09\x1f\x14\x41\x26\xb3\x0a\xc5\x33\x10\xde\xb4\x2e\xc3\x83\xa1\x04\xbb\x47\x44\x12\x9e\x87\x42\xd5\xb8\xb5\x8f\x0e\x1f\x23\x4e\x00\xe8\x61\xee\x29\x14\x29\x6f\x05\xea\xb9\x84\x42\xd6\xbe\x13\xed\x37\x5b\x1b\x99\x3f\x48\xb4\xe0\x92\x35\x53\x5f\xc3\x5f\x36\xe7\xbf\x95\xf4\xd5\x41\x05\xf9\xa1\x51\xb4\x9e\x9c\xd2\xe5\xb1\x78\xad\xa4\x8a\xa3\x6d\x03\x4d\xcc\x63\x4d\xcc\x3a\x15\xd5\xd7\x31\xaa\xd2\x84\xe5\x36\x6f\x0e\xc8\xa8\xbe\xe2\x11\xd8\x00\xf4\x70\xb2\x8d\x6a\x30\x58\x1f\x81\x66\x91\xfe\x09\x74\x3e\x0f\x8f\x1e\x44\xde\x7b\xfb\x41\x6e\x10\x29\xa1\xa7\xd9\x8d\x2d\x07\x82\xc1\xd9\xf9\x7c\xfe\x62\x9e\x0c\x55\x63\xb0\xf4\xc6\x62\x39\xa0\x0a\xe2\x65\xf1\xf2\xa2\x28\x5e\x5d\x9c\xcd\xf3\x8b\x17\xf8\xf2\xd5\x2b\x94\x73\xfc\xe9\xe2\xf9\xf3\x1c\x8b\xb3\x8b\xf3\x39\x9b\x5f\x3a\x67\xdc\x30\x89\x86\x31\x7c\x44\xeb\xd0\xa3\x26\x0f\x52\x03\xb2\xf9\x86\xf8\x37\x92\x2d\x98\x1e\xcc\xaa\xb0\xbb\x38\xa2\x5b\xdf\xd3\x01\x6f\xd3\xc8\xa1\x84\x4c\x8e\xfd\xfb\xc3\x19\x36\xed\x9c\x9f\xe7\x17\xb6\x4f\x02\xa0\x41\xef\x65\x39\x0d\xbe\x9f\x0c\x07\x12\x22\x22\xf4\xe1\xa7\xf2\x60\x4f\xa0\x10\x11\x9c\x9d\x9e\x27\xfb\x4c\x40\x7c\x32\x0d\x52\xa5\x74\x09\x2b\xd4\x04\x2b\x67\x74\xc9\xa8\x5c\x82\x41\x96\xb4\x0a\x2d\x22\xa2\x95\x48\xdd\x59\xdc\x36\x8d\x74\x6b\xee\xa3\xc1\x20\xf6\x19\xd4\xb9\x35\x4a\x77\x22\xf7\x67\x88\x78\x4d\x0e\x0a\x71\xcb\x6d\x52\xa9\x67\x7d\x7e\x7a\xda\x97\x6b\xa8\x88\x36\x31\xd2\xbe\x6a\x61\x00\x92\x43\x89\xff\xef\xb0\x58\x80\xf8\x5f\xda\x6b\x7e\xe9\xb0\xf3\xed\x20\xe6\xc7\x3c\xc6\xde\xf4\x08\xaf\x83\x92\xe9\x0e\x1e\x1e\x24\xe0\xf3\xb6\x97\x73\xda\xa7\x7f\x72\x2d\xff\xb5\x2d\x2a\x6e\x71\x63\xe1\x63\xeb\xdb\x0d\x0c\xff\x6d\xc1\x27\xba\xf5\x77\x55\xdd\x4a\x27\x1b\x24\x74\x03\xad\x36\x23\x57\xbf\x69\xf3\xa5\x98\x07\xd7\x44\x7f\x71\x77\x62\xf5\xfa\xed\x98\x7e\xd7\xd1\x78\xc8\x63\x7c\x2e\x5f\x76\x30\x38\x1c\x0e\x9c\x03\x3b\x46\xce\x34\x23\x46\xb7\x2d\xba\xf5\x3d\x50\xc6\x07\x73\x63\xee\xb0\x37\xa0\x80\x71\xdb\xd9\x62\xa5\x78\x6a\x1c\x8d\x2e\x11\xa4\x90\x6d\x4d\x8b\xb8\xdd\xdb\x40\xdd\x36\xc3\xf7\x70\x32\xb2\xe1\xb5\xe8\x62\x2f\xed\xe3\x6c\xbc\x39\xec\xf9\xfb\x64\x94\xe8\x71\x5c\x19\x25\xfa\xbd\xf3\xbc\xff\xa1\xb2\x35\x6e\xda\x9a\x94\x95\x8e\xd2\xc2\xb8\xe6\x24\x97\x24\xbf\x5b\x55\x0c\xc7\xb1\x1f\x55\xb1\x7b\xe6\x5b\x55\x31\x48\x89\x8e\x12\xd7\xca\x1b\x49\x38\x81\xb4\x1f\xc2\x03\xd8\x0e\x27\x30\xe0\x8c\x99\xed\x1f\xe1\xfd\x5c\x9e\x6c\x96\x9b\xaf\xb7\x7b\x1c\xda\xe3\xd1\xac\xb7\xbc\xc2\xa5\x9d\x58\xb6\x7a\xca\xb8\x54\xc5\xc4\x2a\xa9\xa2\x78\xba\x46\xf0\xe2\x98\xf9\x52\xe6\x41\x68\xf4\xf4\x74\x99\xfa\xa3\x3c\xbe\x5d\x1e\xab\x7b\x77\x8c\x89\xe1\x76\x48\xe8\x13\x92\x07\xaa\xb8\x3f\xe4\xf1\xeb\x8c\x6f\x42\x2a\x3d\x03\xa5\xc1\xaa\x2f\x58\xfb\xd9\x04\x89\xea\x5f\x20\x51\xa1\x2a\x2b\x7a\x08\x8b\x42\xd1\x93\xb5\xcf\x40\xa3\x32\xab\x9d\x73\x50\x1e\x0a\x45\x84\x39\x90\x01\xc5\x2c\xa5\x2b\x91\x20\x57\x0d\x6a\xcf\x09\x35\x45\x2a\xb7\xee\xe9\xc4\x79\x17\x3a\x5a\x8d\x51\x21\x73\x87\x4e\xd6\xdb\x7f\x8e\xf1\x17\xe0\x14\x81\xdb\xa7\x73\xff\x86\x6b\x67\xe3\xfc\xb6\x95\xb5\xa2\xf5\xe0\xfd\x4c\xbe\x94\xa7\x1b\x69\x2e\x35\x7f\xe6\xf8\xde\x2b\x21\x03\x12\xbc\xc5\x4c\x15\x2a\x03\xee\xf2\x92\x0e\x1e\xd8\x7f\x07\x00\x00\xff\xff\x73\x05\x7c\x2f\x48\x15\x00\x00")

func docsSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerYaml,
		"docs/swagger.yaml",
	)
}

func docsSwaggerYaml() (*asset, error) {
	bytes, err := docsSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.yaml", size: 5448, mode: os.FileMode(420), modTime: time.Unix(1492689227, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/index.html": docsIndexHtml,
	"docs/swagger.yaml": docsSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{docsIndexHtml, map[string]*bintree{}},
		"swagger.yaml": &bintree{docsSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

