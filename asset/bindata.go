// Code generated by go-bindata.
// sources:
// docs/index.html
// docs/swagger.yaml
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x8f\xd3\x3c\x10\xbd\x7f\xbf\x62\x9a\xcb\x77\xc1\x71\x5a\x84\x84\x4a\x52\x09\xb1\x48\x70\x62\xb5\xe2\xc2\xd1\xb5\xa7\xce\x20\xc7\xb6\xec\x49\xdb\x80\xf8\xef\xa8\x89\xda\x26\xab\x8a\x5c\xe2\xe7\x79\x79\x33\x6f\x66\x52\xaf\x9e\xbe\x7d\xfa\xfe\xe3\xf9\x33\xb4\xdc\xb9\xdd\x7f\xf5\xf4\x02\x00\xa8\x5b\x54\x66\x3a\x8e\x90\x89\x1d\xee\xbe\x0c\x11\x53\x24\x0d\x1f\x9f\xbf\xc2\x0b\x1e\x30\xa1\xd7\x58\xcb\x29\x7a\x67\xaf\x84\x00\x8f\x68\xd0\xc0\x21\x24\x50\x46\x45\xa6\x23\x82\xc1\x4c\xd6\x83\x10\x33\x6e\x87\xac\xc0\xab\x0e\x9b\xe2\x48\x78\x8a\x21\x71\x01\x3a\x78\x46\xcf\x4d\x71\x22\xc3\x6d\x63\xf0\x48\x1a\xc5\x08\xde\x00\x79\x62\x52\x4e\x64\xad\x1c\x36\xeb\x02\xe4\x63\x39\x83\x59\x27\x8a\x4c\xc1\xcf\x14\x6f\x65\x8f\xa5\x71\x8b\xa3\x99\x8c\xe9\x88\x06\xf6\x03\x5c\x3d\x96\x0f\x74\x75\xab\x52\x46\x6e\x8a\x9e\x0f\xe2\xfd\x92\xb0\x12\xe2\x06\x5e\xf0\x29\x68\x30\x01\xb3\xff\x9f\x2f\x5f\x79\x8b\x10\x7a\xc6\x04\x51\x59\x84\xcc\x83\xc3\x7c\xa3\x2f\xfa\x31\xc6\xee\x78\x1f\xcc\x00\xbf\x6f\xf0\xf2\x74\x2a\x59\xf2\x5b\xa8\x3e\x2c\xae\xa3\x32\x86\xbc\x5d\xdc\xff\xb9\x9d\x54\x24\xe1\x82\x0d\xaf\xb4\x5a\x24\xdb\xf2\x16\xd6\x55\x15\xcf\x4b\x3d\xc6\x33\x0b\xe5\xc8\xfa\x2d\x38\x3c\x30\xac\xa8\xbb\x4c\x47\x79\xfe\x67\x02\xea\xec\xab\x24\xe3\xdc\xb6\xb0\x79\x5b\xc5\xf3\x43\x95\xb9\xab\xcd\x85\x54\x41\x05\xeb\x77\xf3\x8a\xee\x89\x6a\x39\x6b\x51\x2d\xef\x8b\x5a\x5f\x7a\x35\xeb\x64\x42\x13\x34\xe4\x88\x5a\xf4\xc9\x35\x45\x3e\x29\x6b\x31\x95\x83\xea\x5c\x01\x2d\x19\x14\x6d\xc8\x3c\x2d\x0b\xa7\x1e\x0b\xc8\x7d\x8c\x09\x73\x16\x27\x95\x3c\x79\x9b\xaf\x01\xa7\x7e\x0d\x22\xa1\x37\x98\xc8\xdb\x5d\x2d\x47\xf1\xf9\xd8\xc6\x55\x83\x9c\x74\x53\x48\x99\x70\x4f\xce\x0d\xa5\x25\x6e\xfb\x7d\x49\x41\x8e\x2b\x21\x13\x3a\x54\x19\xb3\x3c\xae\xcb\x4d\x59\x4d\x2a\x65\x47\xbe\xfc\x99\x8b\x5d\x2d\x27\x95\xab\xb5\xc9\x4f\x2d\xa7\xdf\xf2\x6f\x00\x00\x00\xff\xff\xe8\x93\x30\xee\xae\x03\x00\x00")

func docsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_docsIndexHtml,
		"docs/index.html",
	)
}

func docsIndexHtml() (*asset, error) {
	bytes, err := docsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/index.html", size: 942, mode: os.FileMode(420), modTime: time.Unix(1492814863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x73\xdb\xb6\x12\xbe\xf3\x57\xec\xe0\xbd\xc9\x29\x12\x6d\x27\x72\xfc\x38\xcf\xed\xa4\x89\x3b\xf1\xb4\xc9\x64\x62\xf7\x94\xc9\x74\x20\x72\x49\xc2\x21\x01\x18\x58\x5a\x96\xdb\xfe\xf7\x0e\x00\x8a\x22\x25\x4a\x89\x13\x77\xd2\x43\x7c\xb0\x24\x60\xf9\xe1\xdb\x0f\xbb\xd8\x05\xed\x82\x17\x05\x9a\x04\xd8\xd1\xf4\x80\x45\x36\x2d\xb1\x46\x9b\x44\x00\x13\x60\x25\x91\x66\xeb\xaf\x96\x45\xa5\xb2\x94\x00\x13\x35\x2f\x70\xba\x54\x8d\x99\x64\xaa\xe6\x42\x4e\xa9\xca\x58\x34\xe7\x16\xdf\x72\x2a\x13\x60\x31\x8b\xb4\x51\x59\x93\x76\x60\x5c\xeb\x4a\xa4\x9c\x84\x92\xf1\x95\x55\x92\x45\xa9\x92\xb6\xa9\xf7\x18\x08\x99\x2b\x37\x49\x82\x2a\x4c\x80\xbd\x5a\x6a\x34\x5a\xa4\xf0\xfc\xed\xb9\xe3\x75\x83\xc6\x0a\x25\x13\x60\x37\x87\xd3\x03\xc7\x1f\xe0\x76\x52\xa9\xc2\x3f\x05\xd0\x98\x2a\x69\xa9\x27\x71\x9c\x66\x72\x6a\xf8\xa2\x10\x34\x4d\x55\x1d\x97\x0e\xcc\xa6\xbc\xc2\xf0\x55\x8b\x34\xae\xb9\x25\x34\xf1\xef\x06\xad\x6a\x4c\x8a\xb6\x9b\x9a\xda\x9b\xc2\xc1\x67\x68\x53\x23\x34\xf9\x65\x7f\xe6\x96\xe0\xd5\xe5\xe5\x5b\xa8\x45\x6a\x94\x45\x73\x23\x52\x84\x5c\x19\x28\x45\x51\x4e\x2a\xbc\xc1\x0a\xbc\x58\xa0\x8d\x4a\xd1\x5a\x21\x8b\x69\x04\x50\x89\x14\xa5\xc5\x40\x53\xf2\xda\x79\xf7\xfa\xfc\x92\x8d\xd0\x2e\x04\x95\xcd\x7c\x27\xe5\x79\xa5\xe6\x2b\xde\xbf\x9e\xbf\x38\x7b\x73\x71\x36\xad\x33\x16\x59\x4c\x1b\x23\x68\xf9\x12\x73\x21\x85\xe3\xeb\x75\xfe\x09\xb9\x41\x13\xd6\x1d\xf8\x72\x81\xa9\x41\x82\x8f\xb8\xf4\x73\xb4\xd4\x98\x00\xd7\xe2\x97\x76\x20\x90\x7c\xde\x50\xa9\x8c\xb8\xf3\xbb\xe4\xc7\x85\x4c\xa0\x44\x9e\xa1\x89\x88\x17\xed\x5e\xb6\x1e\x9d\x3b\xcf\x83\x4f\xb7\x93\x4c\x58\x5d\xf1\xe5\x9b\xad\xa9\x01\x0d\xf6\xc2\x20\x27\x04\x2e\x33\xa8\xb9\x74\xca\x89\x95\x69\x87\xfb\x0a\x79\x45\xe5\x38\x70\x7f\x6e\x88\x1c\x66\x20\x2d\x31\xfd\x08\x6e\xaf\xd0\xb0\x28\x1b\xca\x13\x6c\xde\xa1\xd5\xaa\xdb\x9e\x20\x05\x53\xf3\x2b\x4c\x29\x00\x1b\xbc\x6e\x84\xc1\x2c\x81\xf7\xcc\x12\xa7\xc6\xb2\x0f\x7e\x42\x1b\xa5\xd1\x90\x08\x41\xed\xfe\xc2\xf4\xea\x57\x87\x36\x57\xaa\x62\xdd\xe0\x90\xe8\x65\x89\xed\x63\xa0\xf2\x8e\xa9\xb3\xc3\x5b\x5e\xeb\x0a\x37\xb0\x81\x4c\x83\x11\x80\xd7\xf4\x25\x56\x48\x78\x2f\x0f\x52\x9e\x96\xc8\x1e\x03\x0b\x41\xbf\xd3\x15\x6f\xf7\x15\x9e\xf8\xe7\x21\x17\x15\xae\xec\xc3\x82\x5f\x23\x8e\x07\xe8\x61\x6e\x28\x14\x28\xaf\x04\xea\x2d\x09\x39\xaf\x6c\x27\xda\x6f\xba\x52\x3c\xbb\x97\x68\x7e\x49\xa7\x99\xb8\xf3\x9f\xce\xdc\x7d\x96\xdc\x96\x3b\x15\x74\x0f\x6d\x79\x6b\xc9\x08\x59\xec\xf3\x57\x73\x2a\x9d\xb7\x8d\xa7\x89\x59\x48\x89\x69\xa7\xa2\xb8\xdb\x46\x15\x92\xb0\x58\xc5\xcd\x0e\x19\xc5\x1d\xee\x81\xf5\x40\xf7\x27\x5b\x8b\x1a\xbd\xf5\x1e\x68\x27\xd2\x97\x40\x67\x33\xff\xe8\x4e\xe4\x8d\xdd\xf7\x72\x03\x8b\x09\x2d\x4d\xaf\x74\x31\x10\x0c\x0e\x8f\x66\xb3\xa7\xb3\x68\xa8\x9a\x03\x8b\xaf\x34\x16\x03\xaa\xc0\x9e\xe5\xcf\x8e\xf3\xfc\xe4\xf8\x70\x96\x1d\x3f\xc5\x67\x27\x27\xc8\x67\xf8\xbf\xe3\x27\x4f\x32\xcc\x0f\x8f\x8f\x66\xce\xfc\xcc\x18\x65\x86\x41\x34\xf4\xe1\x1d\x6a\x83\x16\x25\x59\xe0\x12\xd0\x99\xb7\xc4\x3f\x11\x6c\xde\x74\x67\x54\xf9\xd9\x64\x8f\x6e\xfd\x95\x76\xac\x36\x8e\xec\x53\x48\x65\xd8\xff\xbd\x3b\xc2\xc6\x17\x77\xcf\xbb\x0d\xdb\x24\x01\x50\xa3\xb5\xbc\x18\x07\xdf\x0c\x86\x1d\x01\x11\x10\x36\xe1\x37\xc2\x60\x43\x1f\xef\x10\x1c\x1e\x1c\x45\x9b\x44\x80\x5d\xa8\x1a\xa9\x14\xb2\x80\x05\x4a\x82\x85\x51\xb2\x98\xb2\xc8\x25\xa0\x17\x25\x2e\x7d\x81\x08\x60\x05\x52\x77\x12\x37\x75\xcd\xcd\xd2\x95\x6d\x6f\x10\x8a\x0c\xca\x4c\x2b\x21\x3b\x89\xfb\x1d\x51\xf8\x1b\x6d\x7b\xc2\x94\x69\x03\xa9\x67\x7d\x74\x70\xd0\x17\x6b\xa8\x87\x54\xc1\xd1\xbe\x66\xbe\x9d\xe3\x43\x81\xff\x6b\x30\x4f\x80\xfd\x27\xee\x95\xbe\x78\x58\xf7\xd6\x10\xb3\x7d\x2b\x86\xca\xf4\x15\xab\x0e\x12\xa6\x3b\x76\x5c\x17\x01\xef\x57\x85\xdc\x05\x7d\xfc\x87\xcb\xe4\xbf\x56\x29\xe5\x0a\xdc\xb6\xf0\xa1\xf0\xad\xbb\x05\x3f\xdb\x36\x41\x7d\xc1\xdb\x0e\x08\xde\x7f\xf8\xd7\xef\xca\x48\x41\xff\xa6\x5b\xa3\xb9\xe1\x35\x12\x9a\x81\x56\x6d\x53\xd6\xaf\xeb\xd0\x36\x86\xcc\x25\x4e\x7f\x70\x7d\xa8\xf5\x4a\xf2\x36\xfd\xae\xe8\xb9\x36\xd0\xe1\xbb\x0c\x77\x0b\x0c\xce\x8f\x1d\x47\xc5\x9a\x91\x51\xf5\x16\xa3\xeb\x06\xcd\xf2\x33\x50\xb6\xcf\xee\x5a\xdd\x60\xaf\x87\x01\x65\x56\xed\xc7\x42\xb8\xbe\x72\xab\xbb\x09\x20\x39\x6f\x2a\x4a\xc2\x74\x6f\x02\x65\x53\x0f\xf7\x61\xb2\x65\xe3\xc6\xc2\x12\x1b\xb9\x11\xba\xe7\xb6\x1e\xb8\x2b\xd9\x56\x36\x84\x8e\xe6\xcb\xb2\xe1\xb3\x93\xa1\x7f\x81\x5b\x19\xd7\x4d\x45\x42\x73\x43\x71\xae\x4c\x3d\xc9\x38\xf1\x6f\x96\x3a\xc3\xb6\xee\x7b\xea\xac\x9f\xf9\x54\xea\x0c\xe2\xa6\xa3\xe4\x12\xea\x25\x27\x1c\x41\xda\x74\xe1\x1e\x6c\x87\x9d\x1c\xb8\x88\x99\x6e\x16\x83\x7e\xc0\x8f\x96\xdd\xf6\x12\x38\x0c\xf8\xd1\x93\x7d\xbb\xc5\xeb\x0d\x2f\x70\xae\x47\x86\xb5\x1c\x33\x2e\x44\x3e\x32\x4a\x22\xcf\x1f\xae\x5a\x3c\xdd\x67\x3e\xe7\x99\x17\x1a\x2d\x3d\x5c\xa4\x7e\x4f\x8f\x4f\xa7\xc7\xe2\xb3\xcb\xca\x48\x93\x3c\x24\x74\x81\x64\x81\x4a\x57\x44\xb2\x70\xcb\x73\x3f\x7c\x28\x3d\x06\x21\x41\x8b\x5b\xac\xec\x74\x84\x44\xf9\x0f\x90\x28\x51\x14\x25\xdd\x87\x45\x2e\xe8\xc1\x6a\xac\xa7\x51\xaa\xc5\x7a\x71\x10\x16\x72\x41\x84\x19\x90\x02\xe1\x58\x72\x53\x20\x41\x26\x6a\x94\xd6\x05\xd4\x18\xa9\x4c\x9b\x87\x13\xe7\xb5\xaf\x68\x15\x06\x85\xd4\x0d\x1a\x5e\xad\xde\xea\xb9\x9b\xe4\x18\x81\xeb\x87\x5b\xde\xbf\xc0\x6b\x17\xbf\x6e\x78\x25\x68\x39\xd8\x9f\xd1\x4d\x79\xb8\xbe\xe7\x4c\xba\xfb\x92\xed\x6d\x09\x29\xe0\x60\x35\xa6\x22\x17\x29\xb8\x2a\xcf\x69\xef\x81\x0d\x70\x3b\x71\x20\x13\xeb\xaf\x65\x83\x14\xaf\xb8\x2c\x12\x28\xa9\xae\xfa\x67\x49\xfb\x8e\xe6\xcf\xc1\x69\xf2\x7f\x51\x17\x60\x4d\x7a\xda\xbd\x1a\x1d\x7d\x0d\xdd\xdd\xf6\x7f\x5c\x9c\x1e\xce\x0e\x1e\x95\xfe\x7f\x2e\xe8\x34\x35\x4a\x3f\xca\xb4\x39\x3d\x7a\x74\x7d\x7a\x32\x63\xc0\x2b\x3a\x65\x0c\xe2\x1f\xa2\xbf\x03\x00\x00\xff\xff\x71\x9d\x83\x46\x07\x17\x00\x00")

func docsSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerYaml,
		"docs/swagger.yaml",
	)
}

func docsSwaggerYaml() (*asset, error) {
	bytes, err := docsSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.yaml", size: 5895, mode: os.FileMode(420), modTime: time.Unix(1492819152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/index.html": docsIndexHtml,
	"docs/swagger.yaml": docsSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{docsIndexHtml, map[string]*bintree{}},
		"swagger.yaml": &bintree{docsSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

