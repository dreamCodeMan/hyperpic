// Code generated by go-bindata.
// sources:
// docs/index.html
// docs/swagger.yaml
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x8f\xd3\x3c\x10\xbd\x7f\xbf\x62\x9a\xcb\x77\xc1\x71\x5a\x84\x84\x4a\x52\x09\xb1\x48\x70\x62\xb5\xe2\xc2\xd1\xb5\xa7\xce\x20\xc7\xb6\xec\x49\xdb\x80\xf8\xef\xa8\x89\xda\x26\xab\x8a\x5c\xe2\xe7\x79\x79\x33\x6f\x66\x52\xaf\x9e\xbe\x7d\xfa\xfe\xe3\xf9\x33\xb4\xdc\xb9\xdd\x7f\xf5\xf4\x02\x00\xa8\x5b\x54\x66\x3a\x8e\x90\x89\x1d\xee\xbe\x0c\x11\x53\x24\x0d\x1f\x9f\xbf\xc2\x0b\x1e\x30\xa1\xd7\x58\xcb\x29\x7a\x67\xaf\x84\x00\x8f\x68\xd0\xc0\x21\x24\x50\x46\x45\xa6\x23\x82\xc1\x4c\xd6\x83\x10\x33\x6e\x87\xac\xc0\xab\x0e\x9b\xe2\x48\x78\x8a\x21\x71\x01\x3a\x78\x46\xcf\x4d\x71\x22\xc3\x6d\x63\xf0\x48\x1a\xc5\x08\xde\x00\x79\x62\x52\x4e\x64\xad\x1c\x36\xeb\x02\xe4\x63\x39\x83\x59\x27\x8a\x4c\xc1\xcf\x14\x6f\x65\x8f\xa5\x71\x8b\xa3\x99\x8c\xe9\x88\x06\xf6\x03\x5c\x3d\x96\x0f\x74\x75\xab\x52\x46\x6e\x8a\x9e\x0f\xe2\xfd\x92\xb0\x12\xe2\x06\x5e\xf0\x29\x68\x30\x01\xb3\xff\x9f\x2f\x5f\x79\x8b\x10\x7a\xc6\x04\x51\x59\x84\xcc\x83\xc3\x7c\xa3\x2f\xfa\x31\xc6\xee\x78\x1f\xcc\x00\xbf\x6f\xf0\xf2\x74\x2a\x59\xf2\x5b\xa8\x3e\x2c\xae\xa3\x32\x86\xbc\x5d\xdc\xff\xb9\x9d\x54\x24\xe1\x82\x0d\xaf\xb4\x5a\x24\xdb\xf2\x16\xd6\x55\x15\xcf\x4b\x3d\xc6\x33\x0b\xe5\xc8\xfa\x2d\x38\x3c\x30\xac\xa8\xbb\x4c\x47\x79\xfe\x67\x02\xea\xec\xab\x24\xe3\xdc\xb6\xb0\x79\x5b\xc5\xf3\x43\x95\xb9\xab\xcd\x85\x54\x41\x05\xeb\x77\xf3\x8a\xee\x89\x6a\x39\x6b\x51\x2d\xef\x8b\x5a\x5f\x7a\x35\xeb\x64\x42\x13\x34\xe4\x88\x5a\xf4\xc9\x35\x45\x3e\x29\x6b\x31\x95\x83\xea\x5c\x01\x2d\x19\x14\x6d\xc8\x3c\x2d\x0b\xa7\x1e\x0b\xc8\x7d\x8c\x09\x73\x16\x27\x95\x3c\x79\x9b\xaf\x01\xa7\x7e\x0d\x22\xa1\x37\x98\xc8\xdb\x5d\x2d\x47\xf1\xf9\xd8\xc6\x55\x83\x9c\x74\x53\x48\x99\x70\x4f\xce\x0d\xa5\x25\x6e\xfb\x7d\x49\x41\x8e\x2b\x21\x13\x3a\x54\x19\xb3\x3c\xae\xcb\x4d\x59\x4d\x2a\x65\x47\xbe\xfc\x99\x8b\x5d\x2d\x27\x95\xab\xb5\xc9\x4f\x2d\xa7\xdf\xf2\x6f\x00\x00\x00\xff\xff\xe8\x93\x30\xee\xae\x03\x00\x00")

func docsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_docsIndexHtml,
		"docs/index.html",
	)
}

func docsIndexHtml() (*asset, error) {
	bytes, err := docsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/index.html", size: 942, mode: os.FileMode(420), modTime: time.Unix(1492814863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x51\x6f\xdb\x36\x10\x7e\xd7\xaf\x38\x70\x43\x9f\x6a\x2b\x49\xeb\x34\x13\x96\x0d\x5d\x9b\xa1\xc1\xd6\xa2\x68\xb2\xa7\xa2\x18\x68\xe9\x24\x31\x95\x48\x86\x3c\xc5\x71\xb6\xfd\xf7\x81\xa4\xac\x48\xb6\xec\x34\x6d\x86\xee\xa1\x79\x88\x6d\xf2\x74\xf7\xdd\x77\x77\xbc\xa3\xec\x82\x17\x05\x9a\x04\xd8\xc1\x74\x8f\x45\x36\x2d\xb1\x46\x9b\x44\x00\x13\x60\x25\x91\x66\xb7\x5f\x2d\x8b\x4a\x65\x29\x01\x26\x6a\x5e\xe0\x74\xa9\x1a\x33\xc9\x54\xcd\x85\x9c\x52\x95\xb1\x68\xce\x2d\xbe\xe5\x54\x26\xc0\x62\x16\x69\xa3\xb2\x26\xed\x94\x71\xad\x2b\x91\x72\x12\x4a\xc6\x17\x56\x49\x16\xa5\x4a\xda\xa6\xde\x21\x20\x64\xae\xdc\x26\x09\xaa\x30\x01\xf6\x6a\xa9\xd1\x68\x91\xc2\xf3\xb7\xa7\x0e\xd7\x15\x1a\x2b\x94\x4c\x80\x5d\xed\x4f\xf7\x1c\x7e\x80\xeb\x49\xa5\x0a\xff\x14\x40\x63\xaa\xa4\x85\x9e\xc4\x71\x9a\xc9\xa9\xe1\x8b\x42\xd0\x34\x55\x75\x5c\x3a\x65\x36\xe5\x15\x86\xaf\x5a\xa4\x71\xcd\x2d\xa1\x89\xff\x34\x68\x55\x63\x52\xb4\xdd\xd6\xd4\x5e\x15\x4e\x7d\x86\x36\x35\x42\x93\x37\xfb\x2b\xb7\x04\xaf\xce\xcf\xdf\x42\x2d\x52\xa3\x2c\x9a\x2b\x91\x22\xe4\xca\x40\x29\x8a\x72\x52\xe1\x15\x56\xe0\xc9\x02\x6d\x54\x8a\xd6\x0a\x59\x4c\x23\x80\x4a\xa4\x28\x2d\x06\x98\x92\xd7\xce\xbb\xd7\xa7\xe7\x6c\x04\x76\x21\xa8\x6c\xe6\x5b\x21\xcf\x2b\x35\x5f\xe1\xfe\xfd\xf4\xc5\xc9\x9b\xb3\x93\x69\x9d\xb1\xc8\x62\xda\x18\x41\xcb\x97\x98\x0b\x29\x1c\x5e\xcf\xf3\x2f\xc8\x0d\x9a\x60\x77\xe0\xcb\x19\xa6\x06\x09\x3e\xe2\xd2\xef\xd1\x52\x63\x02\x5c\x8b\xdf\xda\x85\x00\xf2\x79\x43\xa5\x32\xe2\xc6\x47\xc9\xaf\x0b\x99\x40\x89\x3c\x43\x13\x11\x2f\xda\x58\xb6\x1e\x9d\x3a\xcf\x83\x4f\xd7\x93\x4c\x58\x5d\xf1\xe5\x9b\x8d\xad\x01\x0c\xf6\xc2\x20\x27\x04\x2e\x33\xa8\xb9\x74\xcc\x89\x95\x68\xa7\xf7\x15\xf2\x8a\xca\x71\xc5\xfd\xbd\xa1\xe6\xb0\x03\x69\x89\xe9\x47\x70\xb1\x42\xc3\xa2\x6c\x48\x4f\x90\x79\x87\x56\xab\x2e\x3c\x81\x0a\xa6\xe6\x17\x98\x52\x50\x6c\xf0\xb2\x11\x06\xb3\x04\xde\x33\x4b\x9c\x1a\xcb\x3e\xf8\x0d\x6d\x94\x46\x43\x22\x24\xb5\xfb\x0b\xdb\xab\x5f\x9d\xb6\xb9\x52\x15\xeb\x16\x87\x40\xcf\x4b\x6c\x1f\x03\x95\x77\x48\x9d\x1c\x5e\xf3\x5a\x57\xb8\xa6\x1b\xc8\x34\x18\x01\x78\x4e\x5f\x62\x85\x84\xf7\xf2\x20\xe5\x69\x89\xec\x31\xb0\x90\xf4\x5b\x5d\xf1\x72\x5f\xe0\x89\x7f\x1e\x72\x51\xe1\x4a\x3e\x18\xfc\x12\x72\xbc\x82\x9e\xce\x35\x86\x02\xe4\x15\x41\x3d\x93\x90\xf3\xca\x76\xa4\xfd\xa1\x2b\xc5\xb3\x7b\x91\xe6\x4d\x3a\xce\xc4\x8d\xff\x74\xe2\xee\xb3\xe4\xb6\xdc\xca\xa0\x7b\x68\xc3\x5b\x4b\x46\xc8\x62\x97\xbf\x9a\x53\xe9\xbc\x6d\x3c\x4c\xcc\x42\x49\x4c\x3b\x16\xc5\xcd\xa6\x56\x21\x09\x8b\x55\xde\x6c\xa1\x51\xdc\xe0\x0e\xb5\x5e\xd1\xfd\xc1\xd6\xa2\x46\x2f\xbd\x43\xb5\x23\xe9\x73\x54\x67\x33\xff\xe8\x56\xcd\x6b\xd1\xf7\x74\x03\x8b\x09\x2d\x4d\x2f\x74\x31\x20\x0c\xf6\x0f\x66\xb3\xa7\xb3\x68\xc8\x9a\x53\x16\x5f\x68\x2c\x06\x50\x81\x3d\xcb\x9f\x1d\xe6\xf9\xd1\xe1\xfe\x2c\x3b\x7c\x8a\xcf\x8e\x8e\x90\xcf\xf0\x87\xc3\x27\x4f\x32\xcc\xf7\x0f\x0f\x66\x4e\xfc\xc4\x18\x65\x86\x49\x34\xf4\xe1\x1d\x6a\x83\x16\x25\x59\xe0\x12\xd0\x89\xb7\xc0\xef\x48\x36\x2f\xba\x35\xab\xfc\x6e\xb2\x83\xb7\xbe\xa5\x2d\xd6\xc6\x35\xfb\x12\x52\x19\xf6\x7f\x6f\xcf\xb0\x71\xe3\xee\x79\x17\xb0\x75\x10\x00\x35\x5a\xcb\x8b\x71\xe5\xeb\xc9\xb0\x25\x21\x82\x86\x75\xf5\x6b\x69\xb0\xc6\x8f\x77\x08\xf6\xf7\x0e\xa2\x75\x20\xc0\xce\x54\x8d\x54\x0a\x59\xc0\x02\x25\xc1\xc2\x28\x59\x4c\x59\xe4\x0a\xd0\x93\x12\x97\xbe\x41\x04\x65\x05\x52\x77\x12\x37\x75\xcd\xcd\xd2\xb5\x6d\x2f\x10\x9a\x0c\xca\x4c\x2b\x21\x3b\x8a\xfb\x13\x51\xf8\x1b\x1d\x7b\xc2\x96\x69\x13\xa9\x27\x7d\xb0\xb7\xd7\x27\x6b\xc8\x87\x54\xc1\xd1\x3e\x67\x7e\x9c\xe3\x43\x82\xbf\x37\x98\x27\xc0\xbe\x8b\x7b\xad\x2f\x1e\xf6\xbd\x5b\x15\xb3\x5d\x16\x43\x67\xfa\x02\xab\x83\x82\xe9\x8e\x1d\x37\x45\xc0\xfb\x55\x23\x77\x49\x1f\xff\xe5\x2a\xf9\x9f\x55\x49\xb9\x06\xb7\x49\x7c\x68\x7c\xb7\xd3\x82\xdf\x6d\x87\xa0\x3e\xe1\xed\x04\x04\xef\x3f\xfc\xef\xa3\x32\xd2\xd0\xbf\x6a\x68\x34\x37\xbc\x46\x42\x33\xe0\xaa\x1d\xca\xfa\x7d\x1d\xda\xc1\x90\xb9\xc2\xe9\x2f\xde\x1e\x6a\xbd\x96\xbc\x09\xbf\x6b\x7a\x6e\x0c\x74\xfa\x5d\x85\x3b\x03\x83\xf3\x63\xcb\x51\x71\x8b\xc8\xa8\x7a\x03\xd1\x65\x83\x66\xf9\x09\x5a\x36\xcf\xee\x5a\x5d\x61\x6f\x86\x01\x65\x56\xe3\xc7\x42\xb8\xb9\x72\x63\xba\x09\x4a\x72\xde\x54\x94\x84\xed\xde\x06\xca\xa6\x1e\xc6\x61\xb2\x21\xe3\xd6\x82\x89\xb5\xda\x08\xd3\x73\xdb\x0f\xdc\x95\x6c\xa3\x1a\xc2\x44\xf3\x79\xd5\xf0\xc9\xc5\xd0\xbf\xc0\xad\x84\xeb\xa6\x22\xa1\xb9\xa1\x38\x57\xa6\x9e\x64\x9c\xf8\x57\x2b\x9d\xe1\x58\xf7\xad\x74\x6e\x9f\xb9\xab\x74\x06\x79\xd3\x41\x72\x05\xf5\x92\x13\x8e\x68\x5a\x77\xe1\x1e\x68\x87\x93\x1c\xb8\x8c\x99\xae\x37\x83\x7e\xc2\x8f\xb6\xdd\xf6\x12\x38\x4c\xf8\xd1\x93\x7d\x73\xc4\xeb\x2d\x2f\x70\xae\x47\x96\xb5\x1c\x13\x2e\x44\x3e\xb2\x4a\x22\xcf\x1f\xae\x5b\x3c\xdd\x25\x3e\xe7\x99\x27\x1a\x2d\x3d\x5c\xa6\x7e\x2b\x8f\xbb\xcb\x63\xf1\xc9\x6d\x65\x64\x48\x1e\x02\x3a\x43\xb2\x40\xa5\x6b\x22\x59\xb8\xe5\xb9\x1f\x3e\x95\x1e\x83\x90\xa0\xc5\x35\x56\x76\x3a\x02\xa2\xfc\x0f\x40\x94\x28\x8a\x92\xee\x83\x22\x17\xf4\x60\x3d\xd6\xc3\x28\xd5\xe2\xd6\x38\x08\x0b\xb9\x20\xc2\x0c\x48\x81\x70\x28\xb9\x29\x90\x20\x13\x35\x4a\xeb\x12\x6a\x10\xb8\xb1\xae\xca\x52\xa3\x34\x1b\x5b\x9c\xe4\x2a\xe5\xd5\x64\x30\xa3\xf7\x5c\xcb\xb4\x79\x38\x8a\x5f\xfb\xbe\x58\x61\xe0\x59\x5d\xa1\xe1\xd5\xea\xdd\xa0\xbb\x8f\x8e\x71\x7b\xf9\x70\xe6\xfd\x6b\xc0\xd6\xf8\x65\xc3\x2b\x41\xcb\x41\x94\x47\x43\xfb\x70\xd3\xd3\x89\x74\xb7\x2e\xdb\x0b\x2c\x29\xe0\x60\x35\xa6\x22\x17\x29\xb8\x59\x81\xd3\xdd\xa1\xec\x5d\xe2\xbb\x35\xbd\x7e\x4f\x9c\x00\xeb\x9f\xe3\x63\x3d\x04\xe0\x7a\xe2\x10\x4d\xac\xbf\x29\x0e\x4e\x9d\x8a\xcb\x22\x81\x92\xea\xaa\x7f\xbc\xb5\xaf\x8d\xfe\x1e\x58\xfa\x51\xd4\x05\x58\x93\x1e\x77\x6f\x6b\x47\xdf\x8c\x77\x2f\x20\x7e\x5e\x1c\xef\xcf\xf6\x1e\x95\xfe\x7f\x2e\xe8\xd8\x65\xe1\xa3\x4c\x9b\xe3\x83\x47\x97\xc7\x47\x33\x06\xbc\xa2\x63\xc6\x20\xfe\x29\xfa\x37\x00\x00\xff\xff\x43\xe3\x62\x9c\x9a\x17\x00\x00")

func docsSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerYaml,
		"docs/swagger.yaml",
	)
}

func docsSwaggerYaml() (*asset, error) {
	bytes, err := docsSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.yaml", size: 6042, mode: os.FileMode(420), modTime: time.Unix(1512435779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/index.html": docsIndexHtml,
	"docs/swagger.yaml": docsSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{docsIndexHtml, map[string]*bintree{}},
		"swagger.yaml": &bintree{docsSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

